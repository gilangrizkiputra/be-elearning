// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
  teacher
}

enum Level {
  beginner
  intermediate
  advanced
}

enum CourseStatus {
  draft
  publish
}

enum CorrectAnswer {
  a
  b
  c
  d
}

enum DifficultyLevel {
  mudah
  sedang
  sulit
}

enum PaymentStatus {
  pending
  sukses
  gagal
  expired
}

enum ProgressStatus {
  belum
  sedang
  selesai
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  image             String?
  role              Role
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  deleted_at        DateTime?

  teacher_profile   TeacherProfile?
  courses           Course[]           @relation("CourseAuthor")
  transactions      Transaction[]
  progresses        ProgressCourse[]
  training_results  TrainingResult[]
  certificates      Certificate[]
}

model TeacherProfile {
  id                String   @id @default(uuid())
  user_id           String   @unique
  bio               String?
  expertise         String?
  social            String?
  created_at        DateTime @default(now())

  user              User     @relation(fields: [user_id], references: [id])
}

model Course {
  id                String             @id @default(uuid())
  made_by           String
  title             String
  description       String
  category          String
  price             Int
  level             Level
  thumbnail         String?
  status            CourseStatus
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  deleted_at        DateTime?

  author            User               @relation("CourseAuthor", fields: [made_by], references: [id])
  moduls            Modul[]
  transactions      Transaction[]
  progresses        ProgressCourse[]
  certificates      Certificate[]
}

model Modul {
  id                String             @id @default(uuid())
  id_course         String
  title             String
  description       String
  order             Int
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  deleted_at        DateTime?

  course            Course             @relation(fields: [id_course], references: [id])
  videos            Video[]
  exercises         Exercise[]
}

model Video {
  id                String             @id @default(uuid())
  id_modul          String
  title             String
  url_video         String
  duration          Int
  order             Int
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  deleted_at        DateTime?

  modul             Modul              @relation(fields: [id_modul], references: [id])
}

model Exercise {
  id                String             @id @default(uuid())
  id_modul          String
  pertanyaan        String
  option_a          String
  option_b          String
  option_c          String
  option_d          String
  correct_answer    CorrectAnswer
  discussion        String
  difficulty_level  DifficultyLevel
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  deleted_at        DateTime?

  modul             Modul              @relation(fields: [id_modul], references: [id])
  training_results  TrainingResult[]
}

model Transaction {
  id                String             @id @default(uuid())
  id_user           String
  id_course         String
  amount            Int
  transaction_date  DateTime
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  deleted_at        DateTime?

  user              User               @relation(fields: [id_user], references: [id])
  course            Course             @relation(fields: [id_course], references: [id])
  payment           Payment?
}

model Payment {
  id                     String             @id @default(uuid())
  transaction_id         String             @unique
  status                 PaymentStatus
  snap_token             String
  payment_method         String
  midtrans_transaction_id String
  paid_at                DateTime?
  expired_at             DateTime?
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
  deleted_at             DateTime?

  transaction            Transaction        @relation(fields: [transaction_id], references: [id])
}

model ProgressCourse {
  id                     String             @id @default(uuid())
  id_user                String
  id_course              String
  status                 ProgressStatus
  percentage_completed   Float
  start_date             DateTime?
  finish_date            DateTime?
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
  deleted_at             DateTime?

  user                   User               @relation(fields: [id_user], references: [id])
  course                 Course             @relation(fields: [id_course], references: [id])
}

model TrainingResult {
  id_hasil               String             @id @default(uuid())
  id_user                String
  id_soal                String
  user_answers           CorrectAnswer
  is_correct             Boolean
  time_answered          DateTime

  user                   User               @relation(fields: [id_user], references: [id])
  exercise               Exercise           @relation(fields: [id_soal], references: [id])
}

model Certificate {
  id                     String             @id @default(uuid())
  id_user                String
  id_course              String
  publish_date           DateTime
  certificate_number     String
  certificate_file       String

  user                   User               @relation(fields: [id_user], references: [id])
  course                 Course             @relation(fields: [id_course], references: [id])
}
